%{
  #include <iostream>
  #include <cstdlib>
  #include <vector>
  #include <map>
  #include <stack>
  #include <queue>
  #include <string>
  #include "graph.hpp"
   
  using namespace std;

  extern int yylex(); 

  void yyerror(string s){
     cerr << s << "!\n";
     exit(EXIT_FAILURE);
  }
  
  template<typename Base, typename T>
  inline bool instanceof(const T *ptr) {
    return dynamic_cast<const Base*>(ptr) != nullptr;
  }
  
  map<string, vector<vector<int>>*> edges;
  map<string, Graph*> graphs;
%}

%union{
string* id;
int x;
}

%token ID GRAPH ASSIGN ADDEDGE ADDNODE SHOWNEIGHBORS EXIT INFO DFS BFS DIJKSTRA NUMBER

%start program

%%

program: program instruction '\n'    { }
       | instruction         { }
;

instruction:  ID ASSIGN adjacency_list ';'    { edges[*$1]=$3; } 
           |  ID ASSIGN GRAPH '(' ')' ';'     { graphs[*$1]=new Graph(); }
           |  ID ASSIGN GRAPH '(' ID ')' ';'  { 
                                                vector<vector<int>>* adj_list=edges[*$5]; 
                                                graph[*$1]=new Graph(*adj_list);
                                              }
           | ID ADDNODE '(' ID ')' ';'        { }
           | ID ADDEDGE '(' ID ',' ID ')' ';' { }
           | ID SHOWNEIGHBORS '(' ')' ';'     { }
           | EXIT                             { cout << "The program will terminate!\n"; exit(EXIT_SUCCESS); }
           | ID INFO ';'                      { }
           | ID DFS '(' NUMBER ')' ';'        { }
           | ID BFS '(' NUMBER ')' ';'        { }
           | ID DIJKSTRA '(' NUMBER ')' ';'   { }
;
adjacancy_list: 
;           

%%

int main(){
   
   if(yyparse()==0){
     cout << "Everything was okay!\n";
   } else {
     cerr << "Sintax error!\n";
   }

   exit(EXIT_SUCCESS);
}
